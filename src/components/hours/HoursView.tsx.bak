import React, { useEffect, useMemo, useState } from 'react';
import { Calendar } from '@/components/ui/calendar';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/contexts/auth-context';
import TodayHoursView from './TodayHoursView';
import { 
  WorkTimeRecord, 
  workTimeService 
} from '@/lib/services/work-time-service';
import { 
  targetHoursService 
} from '@/lib/services/target-hours-service';
import { useToast } from '@/components/ui/use-toast';
import { startOfDay, endOfDay, isToday, format } from 'date-fns';
import HoursEntryForm from './HoursEntryForm';
import { HoursTable } from './HoursTable';
import { Profile } from '@/types/database.types';
import { Separator } from '@/components/ui/separator';

export interface HoursViewProps {
  currentMonth?: Date;
  hoursData?: any;
  workTimeRecords?: WorkTimeRecord[];
  onSubmitHours?: (hours: number, location: string, description?: string) => Promise<void>;
  readOnly?: boolean;
  employee?: Profile;
}

export const HoursView: React.FC<HoursViewProps> = ({
  currentMonth = new Date(),
  workTimeRecords = [],
  onSubmitHours,
  readOnly = false,
  employee,
}) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [targetHours, setTargetHours] = useState<number>(0);
  const [completedHours, setCompletedHours] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(false);
  const [description, setDescription] = useState<string>('');

  const staffId = employee?.id || user?.id;

  // Calculate today's records - records for the current day and current user
  const todayRecords = useMemo(() => {
    if (!workTimeRecords?.length) return [];

    const today = new Date();
    const startOfToday = startOfDay(today);
    const endOfToday = endOfDay(today);

    return workTimeRecords.filter(record => {
      const recordDate = record.created_at ? new Date(record.created_at) : null;
      return (
        recordDate && 
        recordDate >= startOfToday && 
        recordDate <= endOfToday &&
        record.user_id === staffId
      );
    });
  }, [workTimeRecords, staffId]);

  // Calculate total hours worked today
  const totalHoursToday = useMemo(() => {
    if (!todayRecords?.length) return 0;
    return todayRecords.reduce((total, record) => total + (record.hours_worked || 0), 0);
  }, [todayRecords]);

  const fetchTargetHours = async () => {
    try {
      if (!staffId) return;

      const targetData = await targetHoursService.getTargetHoursByStaffId(staffId);
      if (targetData) {
        setTargetHours(targetData.hours || 0);
      }
    } catch (error) {
      console.error('Error fetching target hours:', error);
    }
  };

  const fetchCompletedHours = async () => {
    try {
      if (!staffId) return;
      
      const { data, error } = await workTimeService.getCompletedHoursByStaffIdAndMonth(
        staffId,
        format(currentMonth, 'yyyy-MM')
      );
      
      if (error) throw error;
      setCompletedHours(data || 0);
    } catch (error) {
      console.error('Error fetching completed hours:', error);
    }
  };

  useEffect(() => {
    fetchTargetHours();
    fetchCompletedHours();
  }, [currentMonth, staffId]);

  const handleManualDescriptionChange = (value: string) => {
    setDescription(value);
  };

  const selectedDateRecords = useMemo(() => {
    if (!selectedDate || !workTimeRecords?.length) return [];

    const start = startOfDay(selectedDate);
    const end = endOfDay(selectedDate);

    return workTimeRecords.filter(record => {
      const recordDate = record.created_at ? new Date(record.created_at) : null;
      return (
        recordDate && 
        recordDate >= start && 
        recordDate <= end &&
        record.user_id === staffId
      );
    });
  }, [selectedDate, workTimeRecords, staffId]);

  const handleSubmitHours = async (hours: number, location: string, description?: string) => {
    setLoading(true);
    try {
      if (onSubmitHours) {
        await onSubmitHours(hours, location, description);
        toast({
          title: "Hours submitted",
          description: "Your work hours have been recorded successfully.",
        });
      }
    } catch (error) {
      console.error('Error submitting hours:', error);
      toast({
        title: "Error",
        description: "There was a problem submitting your hours. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Progress Card */}
      <Card className="shadow-sm">
        <CardHeader className="pb-2">
          <CardTitle>Monthly Target Progress</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex justify-between">
              <span className="text-muted-foreground">Completed Hours:</span>
              <span className="font-medium">{completedHours} / {targetHours}</span>
            </div>
            <div className="h-2 bg-muted rounded-full overflow-hidden">
              <div 
                className="h-full bg-primary" 
                style={{ 
                  width: `${targetHours > 0 ? Math.min(100, (completedHours / targetHours) * 100) : 0}%` 
                }}
              ></div>
            </div>
            <div className="text-xs text-muted-foreground">
              {targetHours > 0 
                ? `${Math.round((completedHours / targetHours) * 100)}% of monthly target completed`
                : "No target hours set for this month"}
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Today's Hours View */}
        <div className="col-span-1">
          <TodayHoursView records={todayRecords} totalHours={totalHoursToday} />
        </div>
        
        {/* Calendar and Form Section */}
        <div className="col-span-1 md:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Work Hours</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col md:flex-row gap-6">
                <div className="flex-1">
                  <Calendar
                    mode="single"
                    selected={selectedDate}
                    onSelect={setSelectedDate}
                    className="rounded-md border"
                  />
                </div>
                
                <div className="flex-1">
                  {!readOnly && isToday(selectedDate as Date) && (
                    <HoursEntryForm 
                      onSubmit={handleSubmitHours} 
                      loading={loading}
                      onDescriptionChange={handleManualDescriptionChange}
                    />
                  )}
                  
                  <Separator className="my-4" />
                  
                  <HoursTable 
                    records={selectedDateRecords} 
                    isToday={selectedDate ? isToday(selectedDate) : false}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}; 